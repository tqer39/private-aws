name: "aws-audit"

on:
  push:
    branches: [feature, main]
    paths:
      - .github/workflows/aws-audit.yml
      - aws-audit/**/*
  pull_request:
    branches: [main]
    paths:
      - .github/workflows/aws-audit.yml
      - aws-audit/**/*

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1 # see: https://github.com/hashicorp/setup-terraform
        with:
          terraform_version: 1.0.11
          cli_config_credentials_token: ${{ secrets.TFC_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        working-directory: "aws-audit"
        run: terraform fmt -recursive -check

      - name: Terraform Init
        id: init
        working-directory: "aws-audit"
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: "aws-audit"
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: "aws-audit"
        shell: bash
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: "aws-audit"
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

  slack_notification:
    name: "Slack Notification"
    needs: terraform
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - uses: 8398a7/action-slack@v3
        with:
          status: failure
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: env.WORKFLOW_CONCLUSION == 'failure'
